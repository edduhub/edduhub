version: '3'

vars:
  APP_NAME: edduhub
  COVERAGE_UNIT_OUT: coverage-unit.out
  COVERAGE_INTEGRATION_OUT: coverage-integration.out
  COVERAGE_MERGED_OUT: coverage-merged.out
  COVERAGE_HTML_OUT: coverage.html
  MIGRATE_PATH: server/db/migrations
  # Using TEST_DB_URL assuming this is for the test database based on the instructions
  TEST_DB_URL: postgres://keto:secret@localhost:5432/keto?sslmode=disable


tasks:
  default:
    desc: Run all tests (unit and integration)
    cmds:
      - task: test

  test:
    desc: Run both unit and integration tests
    deps: [test:unit, test:integration]

  test:unit:
    desc: Run unit tests
    cmds:
      - go test -tags=unit -race -coverprofile={{.COVERAGE_UNIT_OUT}} ./...

  test:integration:
    desc: Run integration tests (requires Docker running)
    cmds:
      - docker info > /dev/null || (echo "Docker is not running. Please start Docker." && exit 1)
      - go test -tags=integration -race -coverprofile={{.COVERAGE_INTEGRATION_OUT}} -v ./...

  cover:
    desc: Generate and view code coverage report (run after tests)
    deps: [cover:merge]
    cmds:
      - go tool cover -html={{.COVERAGE_MERGED_OUT}}
    silent: true

  cover:merge:
    desc: Merge unit and integration test coverage profiles
    cmds:
      - |
        if [ -f {{.COVERAGE_UNIT_OUT}} ] && [ -f {{.COVERAGE_INTEGRATION_OUT}} ]; then
          gocovmerge {{.COVERAGE_UNIT_OUT}} {{.COVERAGE_INTEGRATION_OUT}} > {{.COVERAGE_MERGED_OUT}}
        elif [ -f {{.COVERAGE_UNIT_OUT}} ]; then
          cp {{.COVERAGE_UNIT_OUT}} {{.COVERAGE_MERGED_OUT}}
        elif [ -f {{.COVERAGE_INTEGRATION_OUT}} ]; then
          cp {{.COVERAGE_INTEGRATION_OUT}} {{.COVERAGE_MERGED_OUT}}
        else
          echo "No coverage files found to merge."
          exit 1
        fi
      - echo "Coverage merged into {{.COVERAGE_MERGED_OUT}}"

  lint:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run ./...

  tidy:
    desc: Run go mod tidy
    cmds:
      - go mod tidy -v

  build:
    desc: Build the main application binary
    cmds:
      - go build -o bin/{{.APP_NAME}} ./server

  clean:
    desc: Remove coverage files and built binary
    cmds:
      - rm -f {{.COVERAGE_UNIT_OUT}} {{.COVERAGE_INTEGRATION_OUT}} {{.COVERAGE_MERGED_OUT}} {{.COVERAGE_HTML_OUT}}
      - rm -f bin/{{.APP_NAME}}

  mocks:
    desc: Generate mocks for all interfaces using mockery
    cmds:
      - mockery 

  run:dev:
    desc: Run server with autoreload (requires air)
    cmds:
      - air

  docker:dev:
    desc: Start development environment with Docker Compose
    cmds:
      - docker-compose up --build

  fmt:
    desc: Format code using gofumpt and goimports
    cmds:
      - gofumpt -w .
      - goimports -w .

  swagger:
    desc: Generate Swagger OpenAPI docs (requires swag)
    cmds:
      - swag init -g server/main.go -o server/docs

  migrate:up:
    desc: "Apply database migrations to the test database"
    cmds:
      - migrate -path {{.MIGRATE_PATH}} -database {{.TEST_DB_URL}} up