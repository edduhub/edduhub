// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// KetoService is an autogenerated mock type for the KetoService type
type KetoService struct {
	mock.Mock
}

// CheckPermission provides a mock function with given fields: ctx, namespace, subject, action, resource
func (_m *KetoService) CheckPermission(ctx context.Context, namespace string, subject string, action string, resource string) (bool, error) {
	ret := _m.Called(ctx, namespace, subject, action, resource)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) bool); ok {
		r0 = rf(ctx, namespace, subject, action, resource)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, namespace, subject, action, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelation provides a mock function with given fields: ctx, namespace, object, relation, subject
func (_m *KetoService) CreateRelation(ctx context.Context, namespace string, object string, relation string, subject string) error {
	ret := _m.Called(ctx, namespace, object, relation, subject)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, namespace, object, relation, subject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRelation provides a mock function with given fields: ctx, namespace, object, relation, subject
func (_m *KetoService) DeleteRelation(ctx context.Context, namespace string, object string, relation string, subject string) error {
	ret := _m.Called(ctx, namespace, object, relation, subject)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, namespace, object, relation, subject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewKetoService interface {
	mock.TestingT
	Cleanup(func())
}

// NewKetoService creates a new instance of KetoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKetoService(t mockConstructorTestingTNewKetoService) *KetoService {
	mock := &KetoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
