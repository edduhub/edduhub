// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	models "eduhub/server/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// StudentService is an autogenerated mock type for the StudentService type
type StudentService struct {
	mock.Mock
}

// CreateStudent provides a mock function with given fields: ctx, _a1
func (_m *StudentService) CreateStudent(ctx context.Context, _a1 *models.Student) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Student) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByKratosID provides a mock function with given fields: ctx, kratosID
func (_m *StudentService) FindByKratosID(ctx context.Context, kratosID string) (*models.Student, error) {
	ret := _m.Called(ctx, kratosID)

	var r0 *models.Student
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Student); ok {
		r0 = rf(ctx, kratosID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Student)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, kratosID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FreezeStudent provides a mock function with given fields: ctx, RollNo
func (_m *StudentService) FreezeStudent(ctx context.Context, RollNo string) error {
	ret := _m.Called(ctx, RollNo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, RollNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStudentByID provides a mock function with given fields: ctx, collegeID, studentID
func (_m *StudentService) GetStudentByID(ctx context.Context, collegeID int, studentID int) (*models.Student, error) {
	ret := _m.Called(ctx, collegeID, studentID)

	var r0 *models.Student
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *models.Student); ok {
		r0 = rf(ctx, collegeID, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Student)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, collegeID, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentByRollNo provides a mock function with given fields: ctx, rollNo
func (_m *StudentService) GetStudentByRollNo(ctx context.Context, rollNo string) (*models.Student, error) {
	ret := _m.Called(ctx, rollNo)

	var r0 *models.Student
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Student); ok {
		r0 = rf(ctx, rollNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Student)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rollNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnFreezeStudent provides a mock function with given fields: ctx, RollNo
func (_m *StudentService) UnFreezeStudent(ctx context.Context, RollNo string) error {
	ret := _m.Called(ctx, RollNo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, RollNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStudent provides a mock function with given fields: ctx, model
func (_m *StudentService) UpdateStudent(ctx context.Context, model *models.Student) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Student) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyStudentEnrollment provides a mock function with given fields: ctx, collegeID, studentID, courseID
func (_m *StudentService) VerifyStudentEnrollment(ctx context.Context, collegeID int, studentID int, courseID int) (bool, error) {
	ret := _m.Called(ctx, collegeID, studentID, courseID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) bool); ok {
		r0 = rf(ctx, collegeID, studentID, courseID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, collegeID, studentID, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStudentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewStudentService creates a new instance of StudentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStudentService(t mockConstructorTestingTNewStudentService) *StudentService {
	mock := &StudentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
