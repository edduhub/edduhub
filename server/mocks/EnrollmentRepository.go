// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "eduhub/server/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// EnrollmentRepository is an autogenerated mock type for the EnrollmentRepository type
type EnrollmentRepository struct {
	mock.Mock
}

// CreateEnrollment provides a mock function with given fields: ctx, enrollment
func (_m *EnrollmentRepository) CreateEnrollment(ctx context.Context, enrollment *models.Enrollment) error {
	ret := _m.Called(ctx, enrollment)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnrollment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Enrollment) error); ok {
		r0 = rf(ctx, enrollment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsStudentEnrolled provides a mock function with given fields: ctx, collegeID, studentID, courseID
func (_m *EnrollmentRepository) IsStudentEnrolled(ctx context.Context, collegeID int, studentID int, courseID int) (bool, error) {
	ret := _m.Called(ctx, collegeID, studentID, courseID)

	if len(ret) == 0 {
		panic("no return value specified for IsStudentEnrolled")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) (bool, error)); ok {
		return rf(ctx, collegeID, studentID, courseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) bool); ok {
		r0 = rf(ctx, collegeID, studentID, courseID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, collegeID, studentID, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEnrollmentRepository creates a new instance of EnrollmentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnrollmentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EnrollmentRepository {
	mock := &EnrollmentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
