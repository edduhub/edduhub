// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	auth "eduhub/server/internal/services/auth"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// AddPermission provides a mock function with given fields: ctx, identityID, action, resource
func (_m *AuthService) AddPermission(ctx context.Context, identityID string, action string, resource string) error {
	ret := _m.Called(ctx, identityID, action, resource)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, identityID, action, resource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssignRole provides a mock function with given fields: ctx, identityID, role
func (_m *AuthService) AssignRole(ctx context.Context, identityID string, role string) error {
	ret := _m.Called(ctx, identityID, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, identityID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckCollegeAccess provides a mock function with given fields: identity, collegeID
func (_m *AuthService) CheckCollegeAccess(identity *auth.Identity, collegeID string) bool {
	ret := _m.Called(identity, collegeID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*auth.Identity, string) bool); ok {
		r0 = rf(identity, collegeID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CheckPermission provides a mock function with given fields: ctx, identity, subject, action, resource
func (_m *AuthService) CheckPermission(ctx context.Context, identity *auth.Identity, subject string, action string, resource string) (bool, error) {
	ret := _m.Called(ctx, identity, subject, action, resource)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *auth.Identity, string, string, string) bool); ok {
		r0 = rf(ctx, identity, subject, action, resource)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.Identity, string, string, string) error); ok {
		r1 = rf(ctx, identity, subject, action, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteRegistration provides a mock function with given fields: ctx, flowID, req
func (_m *AuthService) CompleteRegistration(ctx context.Context, flowID string, req auth.RegistrationRequest) (*auth.Identity, error) {
	ret := _m.Called(ctx, flowID, req)

	var r0 *auth.Identity
	if rf, ok := ret.Get(0).(func(context.Context, string, auth.RegistrationRequest) *auth.Identity); ok {
		r0 = rf(ctx, flowID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, auth.RegistrationRequest) error); ok {
		r1 = rf(ctx, flowID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicURL provides a mock function with given fields:
func (_m *AuthService) GetPublicURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HasRole provides a mock function with given fields: identity, role
func (_m *AuthService) HasRole(identity *auth.Identity, role string) bool {
	ret := _m.Called(identity, role)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*auth.Identity, string) bool); ok {
		r0 = rf(identity, role)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// InitiateRegistrationFlow provides a mock function with given fields: ctx
func (_m *AuthService) InitiateRegistrationFlow(ctx context.Context) (map[string]interface{}, error) {
	ret := _m.Called(ctx)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermission provides a mock function with given fields: ctx, identityID, action, resource
func (_m *AuthService) RemovePermission(ctx context.Context, identityID string, action string, resource string) error {
	ret := _m.Called(ctx, identityID, action, resource)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, identityID, action, resource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRole provides a mock function with given fields: ctx, identityID, role
func (_m *AuthService) RemoveRole(ctx context.Context, identityID string, role string) error {
	ret := _m.Called(ctx, identityID, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, identityID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateSession provides a mock function with given fields: ctx, sessionToken
func (_m *AuthService) ValidateSession(ctx context.Context, sessionToken string) (*auth.Identity, error) {
	ret := _m.Called(ctx, sessionToken)

	var r0 *auth.Identity
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Identity); ok {
		r0 = rf(ctx, sessionToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthService(t mockConstructorTestingTNewAuthService) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
