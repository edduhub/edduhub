// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DatabaseRepository is an autogenerated mock type for the DatabaseRepository type
type DatabaseRepository[T interface{}] struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, query, args
func (_m *DatabaseRepository[T]) Count(ctx context.Context, query string, args ...interface{}) (int, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) int); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, model
func (_m *DatabaseRepository[T]) Create(ctx context.Context, model *T) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *T) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMany provides a mock function with given fields: ctx, models
func (_m *DatabaseRepository[T]) CreateMany(ctx context.Context, models []*T) error {
	ret := _m.Called(ctx, models)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*T) error); ok {
		r0 = rf(ctx, models)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, model
func (_m *DatabaseRepository[T]) Delete(ctx context.Context, model *T) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *T) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, model, query, args
func (_m *DatabaseRepository[T]) Exists(ctx context.Context, model *T, query string, args ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, model, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *T, string, ...interface{}) bool); ok {
		r0 = rf(ctx, model, query, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *T, string, ...interface{}) error); ok {
		r1 = rf(ctx, model, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *DatabaseRepository[T]) FindAll(ctx context.Context) ([]*T, error) {
	ret := _m.Called(ctx)

	var r0 []*T
	if rf, ok := ret.Get(0).(func(context.Context) []*T); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *DatabaseRepository[T]) FindByID(ctx context.Context, id interface{}) (*T, error) {
	ret := _m.Called(ctx, id)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *T); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: ctx, query, args
func (_m *DatabaseRepository[T]) FindOne(ctx context.Context, query string, args ...interface{}) (*T, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *T); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWhere provides a mock function with given fields: ctx, query, args
func (_m *DatabaseRepository[T]) FindWhere(ctx context.Context, query string, args ...interface{}) ([]*T, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 []*T
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) []*T); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, model
func (_m *DatabaseRepository[T]) Update(ctx context.Context, model *T) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *T) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDatabaseRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabaseRepository creates a new instance of DatabaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabaseRepository[T interface{}](t mockConstructorTestingTNewDatabaseRepository) *DatabaseRepository[T] {
	mock := &DatabaseRepository[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
