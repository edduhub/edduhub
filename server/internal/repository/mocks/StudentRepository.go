// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "eduhub/server/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// StudentRepository is an autogenerated mock type for the StudentRepository type
type StudentRepository struct {
	mock.Mock
}

// CreateStudent provides a mock function with given fields: ctx, student
func (_m *StudentRepository) CreateStudent(ctx context.Context, student *models.Student) error {
	ret := _m.Called(ctx, student)

	if len(ret) == 0 {
		panic("no return value specified for CreateStudent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Student) error); ok {
		r0 = rf(ctx, student)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByKratosID provides a mock function with given fields: ctx, kratosID
func (_m *StudentRepository) FindByKratosID(ctx context.Context, kratosID string) (*models.Student, error) {
	ret := _m.Called(ctx, kratosID)

	if len(ret) == 0 {
		panic("no return value specified for FindByKratosID")
	}

	var r0 *models.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Student, error)); ok {
		return rf(ctx, kratosID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Student); ok {
		r0 = rf(ctx, kratosID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, kratosID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FreezeStudent provides a mock function with given fields: ctx, rollNo
func (_m *StudentRepository) FreezeStudent(ctx context.Context, rollNo string) error {
	ret := _m.Called(ctx, rollNo)

	if len(ret) == 0 {
		panic("no return value specified for FreezeStudent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, rollNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStudentByID provides a mock function with given fields: ctx, collegeID, studentID
func (_m *StudentRepository) GetStudentByID(ctx context.Context, collegeID int, studentID int) (*models.Student, error) {
	ret := _m.Called(ctx, collegeID, studentID)

	if len(ret) == 0 {
		panic("no return value specified for GetStudentByID")
	}

	var r0 *models.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*models.Student, error)); ok {
		return rf(ctx, collegeID, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *models.Student); ok {
		r0 = rf(ctx, collegeID, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, collegeID, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentByRollNo provides a mock function with given fields: ctx, rollNo
func (_m *StudentRepository) GetStudentByRollNo(ctx context.Context, rollNo string) (*models.Student, error) {
	ret := _m.Called(ctx, rollNo)

	if len(ret) == 0 {
		panic("no return value specified for GetStudentByRollNo")
	}

	var r0 *models.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Student, error)); ok {
		return rf(ctx, rollNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Student); ok {
		r0 = rf(ctx, rollNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rollNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnFreezeStudent provides a mock function with given fields: ctx, rollNo
func (_m *StudentRepository) UnFreezeStudent(ctx context.Context, rollNo string) error {
	ret := _m.Called(ctx, rollNo)

	if len(ret) == 0 {
		panic("no return value specified for UnFreezeStudent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, rollNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStudent provides a mock function with given fields: ctx, model
func (_m *StudentRepository) UpdateStudent(ctx context.Context, model *models.Student) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStudent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Student) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStudentRepository creates a new instance of StudentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStudentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StudentRepository {
	mock := &StudentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
