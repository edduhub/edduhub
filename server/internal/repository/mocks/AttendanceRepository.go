// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "eduhub/server/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// AttendanceRepository is an autogenerated mock type for the AttendanceRepository type
type AttendanceRepository struct {
	mock.Mock
}

// FreezeAttendance provides a mock function with given fields: ctx, collegeID, studentID
func (_m *AttendanceRepository) FreezeAttendance(ctx context.Context, collegeID int, studentID int) error {
	ret := _m.Called(ctx, collegeID, studentID)

	if len(ret) == 0 {
		panic("no return value specified for FreezeAttendance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, collegeID, studentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAttendanceByCourse provides a mock function with given fields: ctx, collegeID, courseID
func (_m *AttendanceRepository) GetAttendanceByCourse(ctx context.Context, collegeID int, courseID int) ([]*models.Attendance, error) {
	ret := _m.Called(ctx, collegeID, courseID)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendanceByCourse")
	}

	var r0 []*models.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Attendance, error)); ok {
		return rf(ctx, collegeID, courseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.Attendance); ok {
		r0 = rf(ctx, collegeID, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, collegeID, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttendanceByLecture provides a mock function with given fields: ctx, collegeID, lectureID, courseID
func (_m *AttendanceRepository) GetAttendanceByLecture(ctx context.Context, collegeID int, lectureID int, courseID int) ([]*models.Attendance, error) {
	ret := _m.Called(ctx, collegeID, lectureID, courseID)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendanceByLecture")
	}

	var r0 []*models.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) ([]*models.Attendance, error)); ok {
		return rf(ctx, collegeID, lectureID, courseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []*models.Attendance); ok {
		r0 = rf(ctx, collegeID, lectureID, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, collegeID, lectureID, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttendanceStudent provides a mock function with given fields: ctx, collegeID, studentID
func (_m *AttendanceRepository) GetAttendanceStudent(ctx context.Context, collegeID int, studentID int) ([]*models.Attendance, error) {
	ret := _m.Called(ctx, collegeID, studentID)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendanceStudent")
	}

	var r0 []*models.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Attendance, error)); ok {
		return rf(ctx, collegeID, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.Attendance); ok {
		r0 = rf(ctx, collegeID, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, collegeID, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttendanceStudentInCourse provides a mock function with given fields: ctx, collegeID, studentID, courseID
func (_m *AttendanceRepository) GetAttendanceStudentInCourse(ctx context.Context, collegeID int, studentID int, courseID int) ([]*models.Attendance, error) {
	ret := _m.Called(ctx, collegeID, studentID, courseID)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendanceStudentInCourse")
	}

	var r0 []*models.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) ([]*models.Attendance, error)); ok {
		return rf(ctx, collegeID, studentID, courseID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []*models.Attendance); ok {
		r0 = rf(ctx, collegeID, studentID, courseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, collegeID, studentID, courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkAttendance provides a mock function with given fields: ctx, collegeID, studentID, courseID, lectureID
func (_m *AttendanceRepository) MarkAttendance(ctx context.Context, collegeID int, studentID int, courseID int, lectureID int) (bool, error) {
	ret := _m.Called(ctx, collegeID, studentID, courseID, lectureID)

	if len(ret) == 0 {
		panic("no return value specified for MarkAttendance")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, int) (bool, error)); ok {
		return rf(ctx, collegeID, studentID, courseID, lectureID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, int) bool); ok {
		r0 = rf(ctx, collegeID, studentID, courseID, lectureID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, int) error); ok {
		r1 = rf(ctx, collegeID, studentID, courseID, lectureID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttendance provides a mock function with given fields: ctx, collegeID, studentID, courseID, lectureID, status
func (_m *AttendanceRepository) UpdateAttendance(ctx context.Context, collegeID int, studentID int, courseID int, lectureID int, status string) error {
	ret := _m.Called(ctx, collegeID, studentID, courseID, lectureID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAttendance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, int, string) error); ok {
		r0 = rf(ctx, collegeID, studentID, courseID, lectureID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAttendanceRepository creates a new instance of AttendanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttendanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttendanceRepository {
	mock := &AttendanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
