// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countCoursesByCollege = `-- name: CountCoursesByCollege :one
SELECT COUNT(*) as count
FROM courses
WHERE college_id = $1
`

func (q *Queries) CountCoursesByCollege(ctx context.Context, collegeID sql.NullInt32) (int64, error) {
	row := q.db.QueryRow(ctx, countCoursesByCollege, collegeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countCoursesByInstructor = `-- name: CountCoursesByInstructor :one
SELECT COUNT(*) as count
FROM courses
WHERE college_id = $1 AND instructor_id = $2
`

type CountCoursesByInstructorParams struct {
	CollegeID    sql.NullInt32 `db:"college_id" json:"collegeId"`
	InstructorID sql.NullInt32 `db:"instructor_id" json:"instructorId"`
}

func (q *Queries) CountCoursesByInstructor(ctx context.Context, arg CountCoursesByInstructorParams) (int64, error) {
	row := q.db.QueryRow(ctx, countCoursesByInstructor, arg.CollegeID, arg.InstructorID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
    name,
    description,
    credits,
    instructor_id,
    college_id,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, description, credits, instructor_id, college_id, created_at, updated_at
`

type CreateCourseParams struct {
	Name         string         `db:"name" json:"name"`
	Description  sql.NullString `db:"description" json:"description"`
	Credits      int32          `db:"credits" json:"credits"`
	InstructorID sql.NullInt32  `db:"instructor_id" json:"instructorId"`
	CollegeID    sql.NullInt32  `db:"college_id" json:"collegeId"`
	CreatedAt    time.Time      `db:"created_at" json:"createdAt"`
	UpdatedAt    time.Time      `db:"updated_at" json:"updatedAt"`
}

type CreateCourseRow struct {
	ID           int32          `db:"id" json:"id"`
	Name         string         `db:"name" json:"name"`
	Description  sql.NullString `db:"description" json:"description"`
	Credits      int32          `db:"credits" json:"credits"`
	InstructorID sql.NullInt32  `db:"instructor_id" json:"instructorId"`
	CollegeID    sql.NullInt32  `db:"college_id" json:"collegeId"`
	CreatedAt    time.Time      `db:"created_at" json:"createdAt"`
	UpdatedAt    time.Time      `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (CreateCourseRow, error) {
	row := q.db.QueryRow(ctx, createCourse,
		arg.Name,
		arg.Description,
		arg.Credits,
		arg.InstructorID,
		arg.CollegeID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateCourseRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Credits,
		&i.InstructorID,
		&i.CollegeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM courses
WHERE id = $1 AND college_id = $2
`

type DeleteCourseParams struct {
	ID        int32         `db:"id" json:"id"`
	CollegeID sql.NullInt32 `db:"college_id" json:"collegeId"`
}

func (q *Queries) DeleteCourse(ctx context.Context, arg DeleteCourseParams) error {
	_, err := q.db.Exec(ctx, deleteCourse, arg.ID, arg.CollegeID)
	return err
}

const findAllCourses = `-- name: FindAllCourses :many
SELECT id, name, description, credits, instructor_id, college_id, created_at, updated_at
FROM courses
WHERE college_id = $1
ORDER BY name ASC
LIMIT $2 OFFSET $3
`

type FindAllCoursesParams struct {
	CollegeID sql.NullInt32 `db:"college_id" json:"collegeId"`
	Limit     int32         `db:"limit" json:"limit"`
	Offset    int32         `db:"offset" json:"offset"`
}

type FindAllCoursesRow struct {
	ID           int32          `db:"id" json:"id"`
	Name         string         `db:"name" json:"name"`
	Description  sql.NullString `db:"description" json:"description"`
	Credits      int32          `db:"credits" json:"credits"`
	InstructorID sql.NullInt32  `db:"instructor_id" json:"instructorId"`
	CollegeID    sql.NullInt32  `db:"college_id" json:"collegeId"`
	CreatedAt    time.Time      `db:"created_at" json:"createdAt"`
	UpdatedAt    time.Time      `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) FindAllCourses(ctx context.Context, arg FindAllCoursesParams) ([]FindAllCoursesRow, error) {
	rows, err := q.db.Query(ctx, findAllCourses, arg.CollegeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllCoursesRow{}
	for rows.Next() {
		var i FindAllCoursesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Credits,
			&i.InstructorID,
			&i.CollegeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCourseByID = `-- name: FindCourseByID :one
SELECT id, name, description, credits, instructor_id, college_id, created_at, updated_at
FROM courses
WHERE id = $1 AND college_id = $2
`

type FindCourseByIDParams struct {
	ID        int32         `db:"id" json:"id"`
	CollegeID sql.NullInt32 `db:"college_id" json:"collegeId"`
}

type FindCourseByIDRow struct {
	ID           int32          `db:"id" json:"id"`
	Name         string         `db:"name" json:"name"`
	Description  sql.NullString `db:"description" json:"description"`
	Credits      int32          `db:"credits" json:"credits"`
	InstructorID sql.NullInt32  `db:"instructor_id" json:"instructorId"`
	CollegeID    sql.NullInt32  `db:"college_id" json:"collegeId"`
	CreatedAt    time.Time      `db:"created_at" json:"createdAt"`
	UpdatedAt    time.Time      `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) FindCourseByID(ctx context.Context, arg FindCourseByIDParams) (FindCourseByIDRow, error) {
	row := q.db.QueryRow(ctx, findCourseByID, arg.ID, arg.CollegeID)
	var i FindCourseByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Credits,
		&i.InstructorID,
		&i.CollegeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCoursesByInstructor = `-- name: FindCoursesByInstructor :many
SELECT id, name, description, credits, instructor_id, college_id, created_at, updated_at
FROM courses
WHERE college_id = $1 AND instructor_id = $2
ORDER BY name ASC
LIMIT $3 OFFSET $4
`

type FindCoursesByInstructorParams struct {
	CollegeID    sql.NullInt32 `db:"college_id" json:"collegeId"`
	InstructorID sql.NullInt32 `db:"instructor_id" json:"instructorId"`
	Limit        int32         `db:"limit" json:"limit"`
	Offset       int32         `db:"offset" json:"offset"`
}

type FindCoursesByInstructorRow struct {
	ID           int32          `db:"id" json:"id"`
	Name         string         `db:"name" json:"name"`
	Description  sql.NullString `db:"description" json:"description"`
	Credits      int32          `db:"credits" json:"credits"`
	InstructorID sql.NullInt32  `db:"instructor_id" json:"instructorId"`
	CollegeID    sql.NullInt32  `db:"college_id" json:"collegeId"`
	CreatedAt    time.Time      `db:"created_at" json:"createdAt"`
	UpdatedAt    time.Time      `db:"updated_at" json:"updatedAt"`
}

func (q *Queries) FindCoursesByInstructor(ctx context.Context, arg FindCoursesByInstructorParams) ([]FindCoursesByInstructorRow, error) {
	rows, err := q.db.Query(ctx, findCoursesByInstructor,
		arg.CollegeID,
		arg.InstructorID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindCoursesByInstructorRow{}
	for rows.Next() {
		var i FindCoursesByInstructorRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Credits,
			&i.InstructorID,
			&i.CollegeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :exec
UPDATE courses
SET name = $1,
    description = $2,
    credits = $3,
    instructor_id = $4,
    updated_at = $5
WHERE id = $6 AND college_id = $7
`

type UpdateCourseParams struct {
	Name         string         `db:"name" json:"name"`
	Description  sql.NullString `db:"description" json:"description"`
	Credits      int32          `db:"credits" json:"credits"`
	InstructorID sql.NullInt32  `db:"instructor_id" json:"instructorId"`
	UpdatedAt    time.Time      `db:"updated_at" json:"updatedAt"`
	ID           int32          `db:"id" json:"id"`
	CollegeID    sql.NullInt32  `db:"college_id" json:"collegeId"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) error {
	_, err := q.db.Exec(ctx, updateCourse,
		arg.Name,
		arg.Description,
		arg.Credits,
		arg.InstructorID,
		arg.UpdatedAt,
		arg.ID,
		arg.CollegeID,
	)
	return err
}
